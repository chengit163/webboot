package ${packageName}.${module}.controller;

import ${packageName}.${module}.entity.${table.className};
import ${packageName}.${module}.service.${table.className}Service;
import ${packageName}.${module}.validator.${table.className}Validator;
import ${packageName}.common.annotation.SysLog;
import ${packageName}.common.constant.Code;
import ${packageName}.common.constant.R;
import ${packageName}.common.util.ExcelUtils;
import ${packageName}.common.util.PageUtils;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Map;

@Api(description = "${table.tableComment}控制器")
@RequestMapping("/${module}/${table.fieldName}")
@Controller
public class ${table.className}Controller
{
    @Autowired
    private ${table.className}Service ${table.fieldName}Service;

    @SysLog("查询${table.tableComment}列表")
    @ApiOperation("查询${table.tableComment}列表")
    @ApiImplicitParams({
#foreach ($column in $table.columns)
#if ($column.columnName != $pk.columnName)
            @ApiImplicitParam(name = "${column.fieldName}", value = "${column.columnComment}", dataType = "${column.swaggerType}", paramType = "query"),
#end
#end
            @ApiImplicitParam(name = "pageNum", value = "页码", dataType = "int", paramType = "query", defaultValue = "0"),
            @ApiImplicitParam(name = "pageSize", value = "每页大小", dataType = "int", paramType = "query", defaultValue = "10"),
            @ApiImplicitParam(name = "sort", value = "排序字段", dataType = "string", paramType = "query", allowableValues = "#foreach($column in $table.columns)${column.fieldName}#if($velocityCount!=$table.columns.size()),#end#end"),
            @ApiImplicitParam(name = "order", value = "排序规则", dataType = "string", paramType = "query", allowableValues = "ASC,DESC")
    })
    @RequiresPermissions("${module}:${table.fieldName}:get")
    @GetMapping
    @ResponseBody
    public Map<String, Object> list(@ApiIgnore @RequestParam(required = false) Map<String, Object> map)
    {
        PageUtils.cleanSort(map, ${table.className}.class);
        PageUtils.cleanOrder(map);
        //页码
        int pageNum = PageUtils.getPageNum(map);
        int pageSize = PageUtils.getPageSize(map);
        //分页
        PageHelper.startPage(pageNum, pageSize);
        List<${table.className}> ${table.fieldName}s = ${table.fieldName}Service.list(map);
        Page<${table.className}> page = (Page<${table.className}>) ${table.fieldName}s;
        //结果
        Map<String, Object> result = PageUtils.getResult(page.getTotal(), page);
        return result;
    }

    @SysLog("获取${table.tableComment}详情")
    @ApiOperation("获取${table.tableComment}详情")
    @ApiImplicitParam(name = "${pk.fieldName}", value = "${pk.columnComment}", dataType = "${pk.swaggerType}", paramType = "path", required = true)
    @RequiresPermissions("${module}:${table.fieldName}:get")
    @GetMapping("/{${pk.fieldName}}")
    @ResponseBody
    public ${table.className} get(@PathVariable("${pk.fieldName}") ${pk.javaType} ${pk.fieldName})
    {
        ${table.className} ${table.fieldName} = ${table.fieldName}Service.get(${pk.fieldName});
        return ${table.fieldName};
    }

    @SysLog("新增${table.tableComment}")
    @ApiOperation("新增${table.tableComment}")
    @RequiresPermissions("${module}:${table.fieldName}:save")
    @PostMapping
    @ResponseBody
    public R save(${table.className} ${table.fieldName})
    {
        //校验
        String message = ${table.className}Validator.validate(${table.fieldName}, false);
        if (message != null)
        {
            return R.bind(Code.INVALID.getCode(), message);
        }
        int result = ${table.fieldName}Service.save(${table.fieldName});
        return result > 0 ? R.success() : R.unknown();
    }

    @SysLog("更新${table.tableComment}")
    @ApiOperation("更新${table.tableComment}")
    @RequiresPermissions("${module}:${table.fieldName}:update")
    @PutMapping
    @ResponseBody
    public R update(${table.className} ${table.fieldName})
    {
        //校验
        String message = ${table.className}Validator.validate(${table.fieldName}, true);
        if (message != null)
        {
            return R.bind(Code.INVALID.getCode(), message);
        }
        int result = ${table.fieldName}Service.update(${table.fieldName});
        return result > 0 ? R.success() : R.unknown();
    }

    @SysLog("删除${table.tableComment}")
    @ApiOperation("删除${table.tableComment}")
    @ApiImplicitParam(name = "${pk.fieldName}", value = "${pk.columnComment}", dataType = "${pk.swaggerType}", paramType = "query", required = true)
    @RequiresPermissions("${module}:${table.fieldName}:remove")
    @DeleteMapping
    @ResponseBody
    public R remove(@RequestParam(value = "${pk.fieldName}", defaultValue = "0") ${pk.javaType} ${pk.fieldName})
    {
        int result = ${table.fieldName}Service.remove(${pk.fieldName});
        return result > 0 ? R.success() : R.unknown();
    }

    @SysLog("批量删除${table.tableComment}")
    @ApiOperation("批量删除${table.tableComment}")
    @RequiresPermissions("${module}:${table.fieldName}:batchRemove")
    @PostMapping("/batchRemove")
    @ResponseBody
    public R batchRemove(@RequestParam("${pk.fieldName}s[]") ${pk.javaType}[] ${pk.fieldName}s)
    {
        int result = ${table.fieldName}Service.batchRemove(${pk.fieldName}s);
        return result > 0 ? R.success() : R.unknown();
    }


    private static final String PREFIX = "${module}/${table.fieldName}/";

    @ApiIgnore
    @RequiresPermissions("${module}:${table.fieldName}:get")
    @GetMapping("/main")
    public String main()
    {
        return PREFIX + "main";
    }

    @ApiIgnore
    @RequiresPermissions("${module}:${table.fieldName}:get")
    @GetMapping("/add")
    public String add()
    {
        return PREFIX + "add";
    }

    @ApiIgnore
    @RequiresPermissions("${module}:${table.fieldName}:get")
    @GetMapping("/edit/{${pk.fieldName}}")
    public String edit(@PathVariable("${pk.fieldName}") ${pk.javaType} ${pk.fieldName}, Model model)
    {
        ${table.className} ${table.fieldName} = ${table.fieldName}Service.get(${pk.fieldName});
        model.addAttribute("${table.fieldName}", ${table.fieldName});
        return PREFIX + "edit";
    }

    @ApiIgnore
    @RequiresPermissions("${module}:${table.fieldName}:get")
    @GetMapping("/view/{${pk.fieldName}}")
    public String view(@PathVariable("${pk.fieldName}") ${pk.javaType} ${pk.fieldName}, Model model)
    {
        ${table.className} ${table.fieldName} = ${table.fieldName}Service.get(${pk.fieldName});
        model.addAttribute("${table.fieldName}", ${table.fieldName});
        return PREFIX + "view";
    }

    @SysLog("导出${table.tableComment}Excel")
    @ApiIgnore
    @RequiresPermissions("${module}:${table.fieldName}:export")
    @GetMapping("/export")
    public void export(HttpServletResponse response, @RequestParam(required = false) Map<String, Object> map)
    {
        PageUtils.cleanSort(map, ${table.className}.class);
        PageUtils.cleanOrder(map);
        //
        List<${table.className}> ${table.fieldName}s = ${table.fieldName}Service.list(map);
        ExcelUtils.export(response, ${table.fieldName}s, ${table.className}.class);
    }

    @SysLog("下载${table.tableComment}Excel模板")
    @ApiIgnore
    @RequiresPermissions("${module}:${table.fieldName}:import")
    @GetMapping("/template")
    public void excelTemplate(HttpServletResponse response)
    {
        ExcelUtils.export(response, ${table.className}.class);
    }

    @SysLog("导入${table.tableComment}Excel")
    @ApiIgnore
    @RequiresPermissions("${module}:${table.fieldName}:import")
    @PostMapping("/import")
    @ResponseBody
    public R excelImport(@RequestParam("file") MultipartFile file)
    {
        String filename = file.getOriginalFilename();
        System.out.println("**********Excel: " + filename);
        return R.success();
    }
}
